/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var DEFAULT_SETTINGS = {
    podcastTemplate: "---\ntags: [Podcast]\ndate: {{Date}}\n---\n# {{Title}}\n![]({{ImageURL}})\n## Description:\n{{Description}}\n-> [Podcast Link]({{PodcastURL}})\n## Notes:\n",
    atCursor: true,
    fileName: "",
    podcastService: "apple",
    folder: ""
};
var PodcastNote = /** @class */ (function (_super) {
    __extends(PodcastNote, _super);
    function PodcastNote() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PodcastNote.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('loading plugin PodcastNote');
                        return [4 /*yield*/, this.loadSettings()];
                    case 1:
                        _a.sent();
                        this.addSettingTab(new PodcastNoteSettingTab(this.app, this));
                        this.addCommand({
                            id: 'add-podcast-note',
                            name: 'Add Podcast Note',
                            checkCallback: function (checking) {
                                var leaf = _this.app.workspace.activeLeaf;
                                if (leaf) {
                                    if (!checking) {
                                        new PodcastNoteModal(_this.app, _this).open();
                                    }
                                    return true;
                                }
                                return false;
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.onunload = function () {
        console.log('unloading plugin PodcastNote');
    };
    PodcastNote.prototype.loadSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _a = this;
                        _c = (_b = Object).assign;
                        _d = [{}, DEFAULT_SETTINGS];
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = _c.apply(_b, _d.concat([_e.sent()]));
                        return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.saveSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return PodcastNote;
}(obsidian.Plugin));
var PodcastNoteModal = /** @class */ (function (_super) {
    __extends(PodcastNoteModal, _super);
    function PodcastNoteModal(app, plugin) {
        var _this = _super.call(this, app) || this;
        _this.plugin = plugin;
        return _this;
    }
    PodcastNoteModal.prototype.onOpen = function () {
        var _this = this;
        var contentEl = this.contentEl;
        var html = '<h3 style="margin-top: 0px;">Enter podcast URL:</p><input type="text"/> <br><br><button>Add Podcast Note</button>';
        contentEl.innerHTML = html;
        contentEl.querySelector("button").addEventListener("click", function () {
            var url = contentEl.querySelector("input").value;
            var spotifyHost = "open.spotify.com";
            var appleHost = "podcasts.apple.com";
            var host = "";
            var podcastPath = "";
            if (url.includes(spotifyHost)) {
                _this.plugin.settings.podcastService = "spotify";
                host = spotifyHost;
                podcastPath = url.split(host)[1];
            }
            else if (url.includes(appleHost)) {
                _this.plugin.settings.podcastService = "apple";
                host = appleHost;
                podcastPath = url.split(host)[1];
            }
            else {
                new obsidian.Notice("This is not a valid podcast Service.");
                _this.close();
                return;
            }
            var response = _this.getHttpsResponse(host, podcastPath);
            new obsidian.Notice("Loading Podcast Info");
            response.then(function (result) {
                try {
                    var root = _this.getParsedHtml(result);
                    var podcastInfo = _this.getMetaDataForPodcast(root, url);
                    var title = podcastInfo[1];
                    var podcastString = podcastInfo[0];
                    if (_this.plugin.settings.atCursor) {
                        _this.addAtCursor(podcastString);
                    }
                    else {
                        var fileName = _this.plugin.settings.fileName.replace("{{Title}}", title).replace("{{Date}}", Date.now().toString());
                        _this.addToNewNote(podcastString, fileName);
                    }
                }
                catch (_a) {
                    new obsidian.Notice("The URL is invalid.");
                }
            });
            _this.close();
        });
    };
    PodcastNoteModal.prototype.getHttpsResponse = function (host, podcastPath) {
        var https = require('https');
        var options = {
            hostname: host,
            port: 443,
            path: podcastPath,
            method: 'GET',
            headers: { 'User-Agent': 'Mozilla/5.0' }
        };
        return new Promise(function (resolve, reject) {
            https.request(options, function (res) {
                res.setEncoding('utf8');
                var body = '';
                res.on('data', function (chunk) { return body += chunk; });
                res.on('end', function () { return resolve(body); });
            }).on('error', reject).end();
        });
    };
    PodcastNoteModal.prototype.getParsedHtml = function (s) {
        var parser = new DOMParser();
        var root = parser.parseFromString(s, "text/html");
        return root;
    };
    PodcastNoteModal.prototype.getMetaDataForPodcast = function (root, url) {
        var d = new Date();
        var dateString = ("0" + d.getDate()).slice(-2) + "-" + ("0" + (d.getMonth() + 1)).slice(-2) + "-" + d.getFullYear() + " " + ("0" + d.getHours()).slice(-2) + ":" + ("0" + d.getMinutes()).slice(-2);
        if (this.plugin.settings.podcastService == "spotify") {
            var title = root.querySelector("meta[property='og:title']").getAttribute('content');
            var desc = root.querySelector("meta[property='og:description']").getAttribute('content');
            var imageLink = root.querySelector("meta[property='og:image']").getAttribute('content');
            var podcastTemplate = this.applyTemplate(title, imageLink, desc, dateString, url);
            return [podcastTemplate, title];
        }
        else {
            var title = root.querySelector("meta[property='og:title']").getAttribute('content');
            var desc = root.querySelector(".product-hero-desc__section").querySelector("p").innerHTML;
            var artwork = root.querySelector(".we-artwork__source");
            var imageLink = artwork.getAttribute('srcset').split(" ")[0];
            var podcastTemplate = this.applyTemplate(title, imageLink, desc, dateString, url);
            return [podcastTemplate, title];
        }
    };
    PodcastNoteModal.prototype.applyTemplate = function (title, imageLink, desc, dateString, podcastLink) {
        var podcastTemplate = this.plugin.settings.podcastTemplate;
        podcastTemplate = podcastTemplate
            .replace("{{Title}}", title)
            .replace("{{ImageURL}}", imageLink)
            .replace("{{Description}}", desc)
            .replace("{{Date}}", dateString)
            .replace("{{PodcastURL}}", podcastLink);
        return podcastTemplate;
    };
    PodcastNoteModal.prototype.addAtCursor = function (s) {
        var mdView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        var doc = mdView.editor;
        var currentLine = doc.getCursor();
        doc.replaceRange(s, currentLine, currentLine);
    };
    PodcastNoteModal.prototype.addToNewNote = function (s, fileName) {
        fileName = fileName.replace("/", "").replace("\\", "").replace(":", "").replace(":", "");
        this.app.vault.create(this.plugin.settings.folder + fileName + ".md", s);
    };
    PodcastNoteModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return PodcastNoteModal;
}(obsidian.Modal));
var PodcastNoteSettingTab = /** @class */ (function (_super) {
    __extends(PodcastNoteSettingTab, _super);
    function PodcastNoteSettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    PodcastNoteSettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Podcast Note' });
        new obsidian.Setting(containerEl)
            .setName('Podcast Service')
            .setDesc('Select your podcast service.')
            .addDropdown(function (dropdown) { return dropdown
            .addOptions({ "apple": "Apple Podcast", "spotify": "Spotify Podcast" })
            .setValue(_this.plugin.settings.podcastService)
            .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.podcastService = dropdown.getValue();
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Template')
            .setDesc("you can define your own template. Available placeholders are: {{Title}}, {{ImageURL}}, {{Description}}, {{PodcastURL}}, {{Date}}")
            .addTextArea(function (textarea) {
            textarea
                .setValue(_this.plugin.settings.podcastTemplate)
                .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.podcastTemplate = textarea.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            textarea.inputEl.rows = 10;
            textarea.inputEl.cols = 35;
        });
        new obsidian.Setting(containerEl)
            .setName('Folder')
            .setDesc('New Podcast Notes will be saved here (default: Vault folder)')
            .addTextArea(function (textarea) { return textarea
            .setValue(_this.plugin.settings.folder)
            .setPlaceholder("Podcast Folder/")
            .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.folder = textarea.getValue();
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Filename template')
            .setDesc('Filename template when "New note" is selected. Available placeholders are {{Title}}, {{Date}}')
            .addTextArea(function (textarea) { return textarea
            .setValue(_this.plugin.settings.fileName)
            .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.fileName = textarea.getValue();
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Insert at cursor')
            .setDesc('Insert podcast note at cursor (default: create new note)')
            .addToggle(function (toggle) { return toggle
            .setValue(_this.plugin.settings.atCursor)
            .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.atCursor = toggle.getValue();
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
    };
    return PodcastNoteSettingTab;
}(obsidian.PluginSettingTab));

module.exports = PodcastNote;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
